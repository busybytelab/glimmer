{"version":3,"file":"bY9-vrxt.js","sources":["../../../../../../node_modules/svelte/src/internal/client/dom/elements/bindings/select.js","../../../../../../src/lib/services/llm.ts","../../../../../../src/components/common/SelectField.svelte"],"sourcesContent":["import { effect } from '../../../reactivity/effects.js';\nimport { listen_to_event_and_reset_event } from './shared.js';\nimport { untrack } from '../../../runtime.js';\nimport { is } from '../../../proxy.js';\n\n/**\n * Selects the correct option(s) (depending on whether this is a multiple select)\n * @template V\n * @param {HTMLSelectElement} select\n * @param {V} value\n * @param {boolean} [mounting]\n */\nexport function select_option(select, value, mounting) {\n\tif (select.multiple) {\n\t\treturn select_options(select, value);\n\t}\n\n\tfor (var option of select.options) {\n\t\tvar option_value = get_option_value(option);\n\t\tif (is(option_value, value)) {\n\t\t\toption.selected = true;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!mounting || value !== undefined) {\n\t\tselect.selectedIndex = -1; // no option should be selected\n\t}\n}\n\n/**\n * Selects the correct option(s) if `value` is given,\n * and then sets up a mutation observer to sync the\n * current selection to the dom when it changes. Such\n * changes could for example occur when options are\n * inside an `#each` block.\n * @template V\n * @param {HTMLSelectElement} select\n * @param {() => V} [get_value]\n */\nexport function init_select(select, get_value) {\n\tlet mounting = true;\n\teffect(() => {\n\t\tif (get_value) {\n\t\t\tselect_option(select, untrack(get_value), mounting);\n\t\t}\n\t\tmounting = false;\n\n\t\tvar observer = new MutationObserver(() => {\n\t\t\t// @ts-ignore\n\t\t\tvar value = select.__value;\n\t\t\tselect_option(select, value);\n\t\t\t// Deliberately don't update the potential binding value,\n\t\t\t// the model should be preserved unless explicitly changed\n\t\t});\n\n\t\tobserver.observe(select, {\n\t\t\t// Listen to option element changes\n\t\t\tchildList: true,\n\t\t\tsubtree: true, // because of <optgroup>\n\t\t\t// Listen to option element value attribute changes\n\t\t\t// (doesn't get notified of select value changes,\n\t\t\t// because that property is not reflected as an attribute)\n\t\t\tattributes: true,\n\t\t\tattributeFilter: ['value']\n\t\t});\n\n\t\treturn () => {\n\t\t\tobserver.disconnect();\n\t\t};\n\t});\n}\n\n/**\n * @param {HTMLSelectElement} select\n * @param {() => unknown} get\n * @param {(value: unknown) => void} set\n * @returns {void}\n */\nexport function bind_select_value(select, get, set = get) {\n\tvar mounting = true;\n\n\tlisten_to_event_and_reset_event(select, 'change', (is_reset) => {\n\t\tvar query = is_reset ? '[selected]' : ':checked';\n\t\t/** @type {unknown} */\n\t\tvar value;\n\n\t\tif (select.multiple) {\n\t\t\tvalue = [].map.call(select.querySelectorAll(query), get_option_value);\n\t\t} else {\n\t\t\t/** @type {HTMLOptionElement | null} */\n\t\t\tvar selected_option =\n\t\t\t\tselect.querySelector(query) ??\n\t\t\t\t// will fall back to first non-disabled option if no option is selected\n\t\t\t\tselect.querySelector('option:not([disabled])');\n\t\t\tvalue = selected_option && get_option_value(selected_option);\n\t\t}\n\n\t\tset(value);\n\t});\n\n\t// Needs to be an effect, not a render_effect, so that in case of each loops the logic runs after the each block has updated\n\teffect(() => {\n\t\tvar value = get();\n\t\tselect_option(select, value, mounting);\n\n\t\t// Mounting and value undefined -> take selection from dom\n\t\tif (mounting && value === undefined) {\n\t\t\t/** @type {HTMLOptionElement | null} */\n\t\t\tvar selected_option = select.querySelector(':checked');\n\t\t\tif (selected_option !== null) {\n\t\t\t\tvalue = get_option_value(selected_option);\n\t\t\t\tset(value);\n\t\t\t}\n\t\t}\n\n\t\t// @ts-ignore\n\t\tselect.__value = value;\n\t\tmounting = false;\n\t});\n\n\t// don't pass get_value, we already initialize it in the effect above\n\tinit_select(select);\n}\n\n/**\n * @template V\n * @param {HTMLSelectElement} select\n * @param {V} value\n */\nfunction select_options(select, value) {\n\tfor (var option of select.options) {\n\t\t// @ts-ignore\n\t\toption.selected = ~value.indexOf(get_option_value(option));\n\t}\n}\n\n/** @param {HTMLOptionElement} option */\nfunction get_option_value(option) {\n\t// __value only exists if the <option> has a value attribute\n\tif ('__value' in option) {\n\t\treturn option.__value;\n\t} else {\n\t\treturn option.value;\n\t}\n}\n","import { getAuthToken } from '$lib/auth';\n\nexport type ModelInfo = {\n    name: string;\n    sizeHuman?: string;\n    isDefault: boolean;\n};\n\nexport type PlatformInfo = {\n    name: string;\n    isDefault: boolean;\n    models: ModelInfo[];\n};\n\nexport type LLMInfo = {\n    platforms: PlatformInfo[];\n};\n\nexport type Usage = {\n    LlmModelName?: string;\n    CacheHit?: boolean;\n    Cost?: number;\n    PromptTokens: number;\n    CompletionTokens: number;\n    TotalTokens: number;\n};\n\nexport type ChatResponse = {\n    response: string;\n    usage?: Usage;\n};\n\nclass LLMService {\n    private static instance: LLMService;\n    private baseUrl = '/api/llm';\n\n    private constructor() {}\n\n    public static getInstance(): LLMService {\n        if (!LLMService.instance) {\n            LLMService.instance = new LLMService();\n        }\n        return LLMService.instance;\n    }\n\n    /**\n     * Fetches available LLM models and platform information\n     */\n    public async getInfo(): Promise<LLMInfo> {\n        const authToken = getAuthToken();\n        if (!authToken) {\n            throw new Error('Please log in again.');\n        }\n\n        const response = await fetch(`${this.baseUrl}/info`, {\n            headers: {\n                'Authorization': `Bearer ${authToken}`\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n        return response.json();\n    }\n\n    /**\n     * Sends a chat message to the LLM service\n     */\n    public async chat(prompt: string, systemPrompt: string, model?: string): Promise<ChatResponse> {\n        const authToken = getAuthToken();\n        if (!authToken) {\n            throw new Error('Please log in again.');\n        }\n\n        const requestBody: Record<string, string> = {\n            prompt,\n            systemPrompt\n        };\n\n        if (model) {\n            requestBody.model = model;\n        }\n\n        const response = await fetch(`${this.baseUrl}/chat`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${authToken}`\n            },\n            body: JSON.stringify(requestBody)\n        });\n\n        if (!response.ok) {\n            throw new Error(`Error: ${response.status} ${response.statusText}`);\n        }\n\n        return response.json();\n    }\n}\n\n// Export a singleton instance\nexport const llmService = LLMService.getInstance(); ","<script lang=\"ts\">\n\texport let id: string;\n\texport let label: string;\n\texport let value: string | undefined;\n\texport let disabled: boolean = false;\n\texport let required: boolean = false;\n\texport let cols: string = 'col-span-6 sm:col-span-3';\n\texport let inline: boolean = false;\n</script>\n\n<div class={`${cols} mb-4 ${inline ? 'flex items-center gap-2' : ''}`}>\n\t<label for={id} class=\"block text-sm font-medium text-gray-700 text-left ${inline ? '' : 'mb-1'}\">\n\t\t{label} {#if required}<span class=\"text-red-500\">*</span>{/if}\n\t</label>\n\t<select \n\t\tname={id} \n\t\t{id} \n\t\tbind:value\n\t\t{required}\n\t\t{disabled}\n\t\tclass=\"mt-1 block w-full pl-3 pr-10 py-2 border border-gray-300 rounded-md text-sm shadow-sm placeholder-gray-400\n\t\tfocus:outline-none focus:border-indigo-500 focus:ring-1 focus:ring-indigo-500\n\t\tdark:bg-gray-700 dark:text-gray-100 dark:border-gray-600 dark:placeholder-gray-500\n\t\tdisabled:bg-gray-50 disabled:text-gray-500 disabled:border-gray-200 disabled:shadow-none\n\t\t{disabled ? '' : 'hover:border-gray-400'} ${inline ? 'mt-0' : ''}\n\t\tappearance-none bg-no-repeat bg-[length:1.5em_1.5em] bg-[right_0.5rem_center] bg-[url('data:image/svg+xml;charset=utf-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20fill%3D%22none%22%20viewBox%3D%220%200%2020%2020%22%3E%3Cpath%20stroke%3D%22%236B7280%22%20stroke-linecap%3D%22round%22%20stroke-linejoin%3D%22round%22%20stroke-width%3D%221.5%22%20d%3D%22m6%208%204%204%204-4%22%2F%3E%3C%2Fsvg%3E')]\"\n\t>\n\t\t<slot />\n\t</select>\n</div> "],"names":["select_option","select","value","mounting","select_options","option","option_value","get_option_value","is","init_select","get_value","effect","observer","bind_select_value","get","set","listen_to_event_and_reset_event","is_reset","query","selected_option","_LLMService","__publicField","authToken","getAuthToken","response","prompt","systemPrompt","model","requestBody","LLMService","llmService","id","$.prop","$$props","label","disabled","required","cols","inline","$$render","consequent","$.set_class","div"],"mappings":"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","x_google_ignoreList":[0]}