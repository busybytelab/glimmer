{"version":3,"file":"CqVZ8Icr.js","sources":["../../../../../../src/components/learners/LearnerCard.svelte","../../../../../../src/components/learners/LearnersList.svelte"],"sourcesContent":["<script lang=\"ts\">\n    import type { Learner } from '$lib/types';\n    \n    export let learner: Learner;\n    export let actions: Array<{\n        label: string;\n        color?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning';\n        onClick: (learner: Learner) => void;\n    }> = [];\n    export let clickable: boolean = false;\n    export let onClick: (learner: Learner) => void = () => {};\n    export let shadow: boolean = true;\n    export let showPreferences: boolean = true;\n    \n    // Helper function to get button color classes\n    function getColorClasses(color: string = 'primary') {\n        switch(color) {\n            case 'secondary':\n                return 'bg-gray-100 hover:bg-gray-200 text-gray-800';\n            case 'success':\n                return 'bg-green-100 hover:bg-green-200 text-green-800';\n            case 'danger':\n                return 'bg-red-100 hover:bg-red-200 text-red-800';\n            case 'warning':\n                return 'bg-yellow-100 hover:bg-yellow-200 text-yellow-800';\n            case 'primary':\n            default:\n                return 'bg-blue-100 hover:bg-blue-200 text-blue-800';\n        }\n    }\n</script>\n\n{#if clickable}\n<button \n    class={`\n        bg-white rounded-lg w-full text-left\n        ${shadow ? 'shadow-md' : 'border border-gray-100'} \n        p-6 \n        hover:shadow-lg transition-shadow cursor-pointer\n    `}\n    on:click={() => onClick(learner)}\n    aria-label={`Select ${learner.nickname}`}\n>\n    <div class=\"flex items-center mb-4\">\n        <div class=\"bg-blue-100 text-blue-800 p-3 rounded-full mr-4\">\n            {#if learner.avatar}\n                <img \n                    src={learner.avatar} \n                    alt={learner.nickname} \n                    class=\"h-8 w-8 rounded-full object-cover\"\n                />\n            {:else}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                </svg>\n            {/if}\n        </div>\n        <div>\n            <h3 class=\"text-lg font-semibold text-gray-900\">{learner.nickname}</h3>\n            <p class=\"text-sm text-gray-600\">{learner.user?.name || 'Unknown user'}</p>\n        </div>\n    </div>\n    \n    <div class=\"flex flex-wrap gap-2 mb-3\">\n        {#if learner.age}\n            <span class=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                Age: {learner.age}\n            </span>\n        {/if}\n        \n        {#if learner.grade_level}\n            <span class=\"bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                Grade: {learner.grade_level}\n            </span>\n        {/if}\n    </div>\n    \n    {#if showPreferences && learner.learning_preferences && learner.learning_preferences.length > 0}\n        <div class=\"mt-3 mb-4\">\n            <p class=\"text-xs text-gray-500 mb-1\">Learning preferences:</p>\n            <div class=\"flex flex-wrap gap-1\">\n                <span class=\"bg-gray-100 text-gray-800 text-xs font-medium px-2 py-0.5 rounded\">\n                    {learner.learning_preferences}\n                </span>\n            </div>\n        </div>\n    {/if}\n    \n    {#if actions.length > 0}\n        <div class=\"flex flex-wrap gap-2 mt-3\">\n            {#each actions as action}\n                <div\n                    role=\"button\"\n                    tabindex=\"0\"\n                    class={`px-3 py-1.5 text-xs font-medium rounded-md cursor-pointer ${getColorClasses(action.color)}`}\n                    on:click|stopPropagation={(e) => {\n                        e.preventDefault();\n                        action.onClick(learner);\n                    }}\n                    on:keypress|stopPropagation={(e) => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                            e.preventDefault();\n                            action.onClick(learner);\n                        }\n                    }}\n                >\n                    {action.label}\n                </div>\n            {/each}\n        </div>\n    {/if}\n</button>\n{:else}\n<div \n    class={`\n        bg-white rounded-lg\n        ${shadow ? 'shadow-md' : 'border border-gray-100'} \n        p-6 \n    `}\n>\n    <div class=\"flex items-center mb-4\">\n        <div class=\"bg-blue-100 text-blue-800 p-3 rounded-full mr-4\">\n            {#if learner.avatar}\n                <img \n                    src={learner.avatar} \n                    alt={learner.nickname} \n                    class=\"h-8 w-8 rounded-full object-cover\"\n                />\n            {:else}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                </svg>\n            {/if}\n        </div>\n        <div>\n            <h3 class=\"text-lg font-semibold text-gray-900\">{learner.nickname}</h3>\n            <p class=\"text-sm text-gray-600\">{learner.user?.name || 'Unknown user'}</p>\n        </div>\n    </div>\n    \n    <div class=\"flex flex-wrap gap-2 mb-3\">\n        {#if learner.age}\n            <span class=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                Age: {learner.age}\n            </span>\n        {/if}\n        \n        {#if learner.grade_level}\n            <span class=\"bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                Grade: {learner.grade_level}\n            </span>\n        {/if}\n    </div>\n    \n    {#if showPreferences && learner.learning_preferences && learner.learning_preferences.length > 0}\n        <div class=\"mt-3 mb-4\">\n            <p class=\"text-xs text-gray-500 mb-1\">Learning preferences:</p>\n            <div class=\"flex flex-wrap gap-1\">\n                {#each learner.learning_preferences as pref}\n                    <span class=\"bg-gray-100 text-gray-800 text-xs font-medium px-2 py-0.5 rounded\">\n                        {pref}\n                    </span>\n                {/each}\n            </div>\n        </div>\n    {/if}\n    \n    {#if actions.length > 0}\n        <div class=\"flex flex-wrap gap-2 mt-3\">\n            {#each actions as action}\n                <div\n                    role=\"button\"\n                    tabindex=\"0\"\n                    class={`px-3 py-1.5 text-xs font-medium rounded-md cursor-pointer ${getColorClasses(action.color)}`}\n                    on:click|stopPropagation={(e) => {\n                        e.preventDefault();\n                        action.onClick(learner);\n                    }}\n                    on:keypress|stopPropagation={(e) => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                            e.preventDefault();\n                            action.onClick(learner);\n                        }\n                    }}\n                >\n                    {action.label}\n                </div>\n            {/each}\n        </div>\n    {/if}\n</div>\n{/if} ","<script lang=\"ts\">\n    import type { Learner } from '$lib/types';\n    import LearnerCard from './LearnerCard.svelte';\n    \n    export let learners: Learner[] = [];\n    export let loading: boolean = false;\n    export let emptyMessage: string = 'No learners found.';\n    export let gridCols: string = 'grid-cols-1 md:grid-cols-2 lg:grid-cols-3';\n    export let showPreferences: boolean = true;\n    \n    export let onClick: (learner: Learner) => void = () => {};\n    export let cardActions: Array<{\n        label: string;\n        color?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning';\n        onClick: (learner: Learner) => void;\n        condition?: (learner: Learner) => boolean;\n    }> = [];\n    \n    // Filter actions based on conditions if provided\n    function getActionsForLearner(learner: Learner) {\n        return cardActions.filter(action => !action.condition || action.condition(learner));\n    }\n</script>\n\n{#if loading}\n    <div class=\"flex justify-center items-center h-32\">\n        <div class=\"animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-primary\"></div>\n    </div>\n{:else if learners.length === 0}\n    <div class=\"bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n        <div class=\"flex\">\n            <div class=\"flex-shrink-0\">\n                <svg class=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fill-rule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\" />\n                </svg>\n            </div>\n            <div class=\"ml-3\">\n                <p class=\"text-sm text-yellow-700\">\n                    {emptyMessage}\n                </p>\n            </div>\n        </div>\n    </div>\n{:else}\n    <div class={`grid ${gridCols} gap-6`}>\n        {#each learners as learner}\n            <LearnerCard \n                {learner} \n                clickable={onClick !== undefined}\n                {onClick}\n                {showPreferences}\n                actions={getActionsForLearner(learner)}\n            />\n        {/each}\n    </div>\n{/if} "],"names":["learner","$.prop","$$props","actions","clickable","onClick","shadow","showPreferences","getColorClasses","color","$.set_attribute","img","$$render","consequent","alternate","$.template_effect","$.set_text","text_2","consequent_1","text_3","consequent_2","text_4","consequent_3","$.each","div_6","action","text_5","$.get","$.event","div_7","$.stopPropagation","e","consequent_4","button","text","text_1","_a","img_1","consequent_6","alternate_2","text_8","consequent_7","text_9","consequent_8","$.index","$$anchor","pref","consequent_9","div_15","text_11","div_16","consequent_10","text_6","text_7","consequent_5","alternate_1","learners","loading","emptyMessage","gridCols","cardActions","getActionsForLearner","div_4","expression","$.derived_safe_equal","expression_1"],"mappings":"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"}