{"version":3,"file":"12.CBAU3Vtr.js","sources":["../../../../../../src/lib/services/practice.ts","../../../../../../src/routes/practice-topics/[id]/create-session/+page.svelte"],"sourcesContent":["import pb from '$lib/pocketbase';\n\nexport interface CreatePracticeSessionRequest {\n    learnerId: string;\n    practiceTopicId: string;\n}\n\nexport interface PracticeSession {\n    id: string;\n    name: string;\n    status: string;\n    practice_topic: string;\n    learner: string;\n    practice_items: string;\n    assigned_at: string;\n    created: string;\n    updated: string;\n}\n\nclass PracticeService {\n    private async ensureAuth(): Promise<void> {\n        if (!pb.authStore.isValid) {\n            throw new Error('You must be logged in to create a practice session');\n        }\n    }\n\n    private async refreshAuth(): Promise<void> {\n        try {\n            await pb.collection('users').authRefresh();\n        } catch (err) {\n            // If refresh fails, clear the auth store and throw\n            pb.authStore.clear();\n            throw new Error('Your session has expired. Please log in again.');\n        }\n    }\n\n    private async makeRequest(request: CreatePracticeSessionRequest): Promise<PracticeSession> {\n        const response = await fetch('/api/practice/session', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': pb.authStore.token\n            },\n            body: JSON.stringify(request)\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json().catch(() => ({}));\n            throw {\n                status: response.status,\n                message: errorData.message || `Server error: ${response.status}`\n            };\n        }\n\n        return response.json();\n    }\n\n    async createSession(request: CreatePracticeSessionRequest): Promise<PracticeSession> {\n        await this.ensureAuth();\n\n        try {\n            return await this.makeRequest(request);\n        } catch (error: any) {\n            // If unauthorized, try to refresh the token once\n            if (error.status === 401) {\n                await this.refreshAuth();\n                try {\n                    return await this.makeRequest(request);\n                } catch (retryError: any) {\n                    throw new Error(retryError.message);\n                }\n            }\n            throw new Error(error.message);\n        }\n    }\n}\n\nexport const practiceService = new PracticeService(); ","<script lang=\"ts\">\n    import { onMount } from 'svelte';\n    import { page } from '$app/stores';\n    import { goto } from '$app/navigation';\n    import type { PracticeTopic, Learner } from '$lib/types';\n    import pb from '$lib/pocketbase';\n    import LearnersList from '../../../../components/learners/LearnersList.svelte';\n    import { practiceService } from '$lib/services/practice';\n    import ActionToolbar from '../../../../components/common/ActionToolbar.svelte';\n    import Breadcrumbs from '../../../../components/common/Breadcrumbs.svelte';\n\n    // Define the breadcrumb item type\n    type BreadcrumbItem = {\n        label: string;\n        href?: string;\n        icon?: string;\n    };\n\n    let topic: PracticeTopic | null = null;\n    let learners: Learner[] = [];\n    let loading = true;\n    let loadingLearners = true;\n    let creatingSession = false;\n    let selectedLearner: Learner | null = null;\n    let error: string | null = null;\n    let topicId: string | null = null;\n    let breadcrumbItems: BreadcrumbItem[] = [];\n\n    onMount(async () => {\n        try {\n            // Get the topic ID from the page store\n            topicId = $page.params.id;\n            \n            // Load data if we have an ID\n            if (topicId) {\n                await loadTopic(topicId);\n                await loadLearners();\n                updateBreadcrumbs();\n            } else {\n                error = 'Invalid topic ID';\n                loading = false;\n            }\n        } catch (err) {\n            console.error('Error in onMount:', err);\n            error = err instanceof Error ? err.message : 'An unexpected error occurred';\n            loading = false;\n        }\n    });\n\n    async function loadTopic(id: string) {\n        try {\n            loading = true;\n            error = null;\n            \n            if (!id) {\n                throw new Error('Topic ID is required');\n            }\n\n            const result = await pb.collection('practice_topics').getOne<PracticeTopic>(id);\n\n            // Parse tags if they're stored as a string\n            if (result.tags) {\n                const tagsValue = result.tags as string | string[];\n                if (typeof tagsValue === 'string') {\n                    try {\n                        if (tagsValue.trim().startsWith('[')) {\n                            result.tags = JSON.parse(tagsValue);\n                        } else {\n                            result.tags = tagsValue.split(',').map((tag: string) => tag.trim()).filter(Boolean);\n                        }\n                    } catch (err) {\n                        console.error('Error parsing tags:', err);\n                        result.tags = [];\n                    }\n                }\n            } else {\n                result.tags = [];\n            }\n\n            topic = result;\n        } catch (err) {\n            console.error('Failed to load topic:', err);\n            error = 'Failed to load practice topic';\n        } finally {\n            loading = false;\n        }\n    }\n\n    async function loadLearners() {\n        try {\n            loadingLearners = true;\n\n            const result = await pb.collection('learners').getList(1, 50, {\n                sort: 'nickname',\n                expand: 'user'\n            });\n\n            learners = result.items;\n        } catch (err) {\n            console.error('Failed to load learners:', err);\n            error = 'Failed to load learners';\n        } finally {\n            loadingLearners = false;\n        }\n    }\n\n    function goBack() {\n        // Navigate back to the topic page\n        goto(`/practice-topics/${topicId}`);\n    }\n\n    async function createPracticeSession(learner: Learner) {\n        if (!topic) return;\n        try {\n            creatingSession = true;\n            error = null;\n            selectedLearner = learner;\n            \n            // Create the session using the practice service\n            const newSession = await practiceService.createSession({\n                learnerId: learner.id,\n                practiceTopicId: topic.id\n            });\n            \n            // Redirect to practice session page\n            goto(`/practice-sessions/${newSession.id}`);\n        } catch (err) {\n            console.error('Failed to create practice session:', err);\n            error = err instanceof Error ? err.message : 'An unexpected error occurred';\n        } finally {\n            creatingSession = false;\n            selectedLearner = null;\n        }\n    }\n\n    function updateBreadcrumbs() {\n        if (!topic) return;\n        \n        breadcrumbItems = [\n            {\n                label: 'Topics',\n                href: '/practice-topics',\n                icon: 'topic'\n            },\n            {\n                label: topic.name,\n                href: `/practice-topics/${topic.id}`,\n                icon: 'topic'\n            },\n            {\n                label: 'Create Session',\n                icon: 'create'\n            }\n        ];\n    }\n\n    // Back action for the toolbar\n    $: backAction = {\n        id: 'back',\n        label: 'Back',\n        icon: 'back',\n        variant: 'secondary' as const,\n        onClick: goBack\n    };\n</script>\n\n<div class=\"container mx-auto px-4 py-8\">\n    <div class=\"flex justify-between items-center mb-6\">\n        <div>\n            <Breadcrumbs items={breadcrumbItems} />\n        </div>\n        <ActionToolbar actions={[backAction]} />\n    </div>\n\n    {#if loading}\n        <div class=\"flex justify-center items-center h-64\">\n            <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary\"></div>\n        </div>\n    {:else if error}\n        <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <strong class=\"font-bold\">Error!</strong>\n            <span class=\"block sm:inline\"> {error}</span>\n        </div>\n    {:else if topic}\n        <div class=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n            <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">{topic.name}</h2>\n            \n            {#if topic.description}\n                <p class=\"text-gray-600 mb-4\">{topic.description}</p>\n            {/if}\n            \n            <div class=\"flex flex-wrap gap-2 mb-4\">\n                <span class=\"bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                    {topic.subject}\n                </span>\n                \n                {#if topic.target_age_range}\n                    <span class=\"bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                        Age: {topic.target_age_range}\n                    </span>\n                {/if}\n                \n                {#if topic.target_grade_level}\n                    <span class=\"bg-purple-100 text-purple-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                        Grade: {topic.target_grade_level}\n                    </span>\n                {/if}\n\n                {#if topic.difficulty_level}\n                    <span class=\"bg-orange-100 text-orange-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                        Difficulty: {topic.difficulty_level}\n                    </span>\n                {/if}\n            </div>\n        </div>\n        \n        <h2 class=\"text-xl font-semibold text-gray-900 mb-4\">Select a Learner</h2>\n        \n        <LearnersList\n            learners={learners}\n            loading={loadingLearners}\n            emptyMessage=\"No learners found. Please add learners to your account first.\"\n            onClick={createPracticeSession}\n            cardActions={[\n                {\n                    label: 'Create Practice',\n                    color: 'primary',\n                    onClick: createPracticeSession\n                }\n            ]}\n        />\n\n        {#if creatingSession}\n            <div class=\"fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50\">\n                <div class=\"bg-white rounded-lg p-8 max-w-md w-full mx-4\">\n                    <div class=\"flex flex-col items-center\">\n                        <div class=\"animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary mb-4\"></div>\n                        <h3 class=\"text-xl font-semibold text-gray-900 mb-2\">Creating Practice Session</h3>\n                        <p class=\"text-gray-600 text-center mb-4\">\n                            We're generating personalized practice items for {selectedLearner?.nickname || 'the learner'}.\n                        </p>\n                        <p class=\"text-gray-600 text-center mb-4\">\n                            This may take a few minutes. Please don't refresh the page.\n                        </p>\n                        <div class=\"w-full bg-gray-200 rounded-full h-2.5\">\n                            <div class=\"bg-primary h-2.5 rounded-full animate-pulse\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        {/if}\n    {/if}\n</div> "],"names":["PracticeService","pb","request","response","errorData","error","retryError","practiceService","topic","learners","$.mutable_source","loading","loadingLearners","creatingSession","selectedLearner","topicId","breadcrumbItems","onMount","$page","loadTopic","loadLearners","updateBreadcrumbs","$.set","err","id","result","tagsValue","tag","goBack","goto","createPracticeSession","learner","newSession","$.get","backAction","$.template_effect","$.set_text","text_2","$$render","consequent_2","text_4","consequent_3","text_5","consequent_4","text_6","consequent_5","consequent_6","text_1","text_3","consequent_7","consequent_1","alternate_1","consequent","alternate"],"mappings":"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"}