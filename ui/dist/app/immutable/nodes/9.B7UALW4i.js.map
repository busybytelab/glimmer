{"version":3,"file":"9.B7UALW4i.js","sources":["../../../../../../src/components/questions/QuestionHeader.svelte","../../../../../../src/components/questions/MultipleChoiceQuestion.svelte","../../../../../../src/components/questions/TrueFalseQuestion.svelte","../../../../../../src/components/questions/ShortAnswerQuestion.svelte","../../../../../../src/components/questions/FillInBlankQuestion.svelte","../../../../../../src/components/questions/QuestionFactory.svelte","../../../../../../src/lib/services/session.ts","../../../../../../src/routes/practice-sessions/[id]/+page.svelte"],"sourcesContent":["<script lang=\"ts\">\n    export let index: number;\n</script>\n\n<h4 class=\"text-md font-medium text-gray-900 mb-2\">\n    Question {index + 1}\n</h4> ","<script lang=\"ts\">\n    import type { PracticeItem } from '$lib/types';\n    import QuestionHeader from './QuestionHeader.svelte';\n\n    export let item: PracticeItem;\n    export let index: number;\n    export let disabled = false;\n    export let showAnswer = false;\n    export let showInstructorInfo = false;\n    export let onAnswerChange: ((answer: string) => void) | undefined = undefined;\n    export let printMode = false;\n\n    function handleAnswerChange(event: Event) {\n        const target = event.target as HTMLInputElement;\n        if (onAnswerChange) {\n            onAnswerChange(target.value);\n        }\n    }\n</script>\n\n<div class=\"border border-gray-200 rounded-lg p-4\">\n    <QuestionHeader {index} />\n    <p class=\"text-gray-600 mb-4\">{item.question_text}</p>\n    \n    <div class=\"space-y-2\">\n        {#each (typeof item.options === 'string' ? JSON.parse(item.options) : item.options) as option, optionIndex}\n            <div class=\"flex items-center\">\n                {#if printMode}\n                    <div class=\"w-4 h-4 border border-gray-400 rounded mr-2\"></div>\n                {:else}\n                    <input\n                        type=\"radio\"\n                        id={`question-${index}-option-${optionIndex}-${item.id}`}\n                        name={`question-${index}-${item.id}`}\n                        value={option}\n                        class=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500\"\n                        {disabled}\n                        on:change={handleAnswerChange}\n                    />\n                {/if}\n                <label \n                    for={printMode ? undefined : `question-${index}-option-${optionIndex}-${item.id}`}\n                    class=\"ml-3 text-gray-700\"\n                >\n                    {option}\n                </label>\n            </div>\n        {/each}\n    </div>\n\n    {#if showAnswer}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Your Answer:</h5>\n            <p class=\"text-gray-600\">{item.user_answer || 'Not answered'}</p>\n        </div>\n    {/if}\n\n    {#if showInstructorInfo}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Correct Answer:</h5>\n            <p class=\"text-gray-600\">{item.correct_answer}</p>\n            {#if item.explanation}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Explanation:</h5>\n                <p class=\"text-gray-600\">{item.explanation}</p>\n            {/if}\n            {#if item.hints_used}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Hints Used:</h5>\n                <p class=\"text-gray-600\">{item.hints_used}</p>\n            {/if}\n        </div>\n    {/if}\n</div> ","<script lang=\"ts\">\n    import type { PracticeItem } from '$lib/types';\n    import QuestionHeader from './QuestionHeader.svelte';\n\n    export let item: PracticeItem;\n    export let index: number;\n    export let disabled = false;\n    export let showAnswer = false;\n    export let showInstructorInfo = false;\n    export let onAnswerChange: ((answer: string) => void) | undefined = undefined;\n    export let printMode = false;\n\n    function handleAnswerChange(event: Event) {\n        const target = event.target as HTMLInputElement;\n        if (onAnswerChange) {\n            onAnswerChange(target.value);\n        }\n    }\n</script>\n\n<div class=\"border border-gray-200 rounded-lg p-4\">\n    <QuestionHeader {index} />\n    <p class=\"text-gray-600 mb-4\">{item.question_text}</p>\n    \n    <div class=\"space-y-2\">\n        <div class=\"flex items-center\">\n            {#if printMode}\n                <div class=\"w-4 h-4 border border-gray-400 rounded mr-2\"></div>\n            {:else}\n                <input\n                    type=\"radio\"\n                    id={`question-${index}-true-${item.id}`}\n                    name={`question-${index}-${item.id}`}\n                    value=\"true\"\n                    class=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500\"\n                    {disabled}\n                    on:change={handleAnswerChange}\n                />\n            {/if}\n            <label \n                for={printMode ? undefined : `question-${index}-true-${item.id}`}\n                class=\"ml-3 text-gray-700\"\n            >\n                True\n            </label>\n        </div>\n        <div class=\"flex items-center\">\n            {#if printMode}\n                <div class=\"w-4 h-4 border border-gray-400 rounded mr-2\"></div>\n            {:else}\n                <input\n                    type=\"radio\"\n                    id={`question-${index}-false-${item.id}`}\n                    name={`question-${index}-${item.id}`}\n                    value=\"false\"\n                    class=\"h-4 w-4 text-indigo-600 focus:ring-indigo-500\"\n                    {disabled}\n                    on:change={handleAnswerChange}\n                />\n            {/if}\n            <label \n                for={printMode ? undefined : `question-${index}-false-${item.id}`}\n                class=\"ml-3 text-gray-700\"\n            >\n                False\n            </label>\n        </div>\n    </div>\n\n    {#if showAnswer}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Your Answer:</h5>\n            <p class=\"text-gray-600\">{item.user_answer || 'Not answered'}</p>\n        </div>\n    {/if}\n\n    {#if showInstructorInfo}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Correct Answer:</h5>\n            <p class=\"text-gray-600\">{item.correct_answer}</p>\n            {#if item.explanation}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Explanation:</h5>\n                <p class=\"text-gray-600\">{item.explanation}</p>\n            {/if}\n            {#if item.hints_used}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Hints Used:</h5>\n                <p class=\"text-gray-600\">{item.hints_used}</p>\n            {/if}\n        </div>\n    {/if}\n</div> ","<script lang=\"ts\">\n    import type { PracticeItem } from '$lib/types';\n    import QuestionHeader from './QuestionHeader.svelte';\n\n    export let item: PracticeItem;\n    export let index: number;\n    export let disabled = false;\n    export let showAnswer = false;\n    export let showInstructorInfo = false;\n    export let onAnswerChange: ((answer: string) => void) | undefined = undefined;\n    export let printMode = false;\n\n    function handleAnswerChange(event: Event) {\n        const target = event.target as HTMLTextAreaElement;\n        if (onAnswerChange) {\n            onAnswerChange(target.value);\n        }\n    }\n</script>\n\n<div class=\"border border-gray-200 rounded-lg p-4\">\n    <QuestionHeader {index} />\n    <p class=\"text-gray-600 mb-4\">{item.question_text}</p>\n    \n    {#if printMode}\n        <div class=\"h-32 border border-gray-300 rounded-md\"></div>\n    {:else}\n        <textarea\n            id={`question-${index}-${item.id}`}\n            class=\"w-full h-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\"\n            placeholder=\"Type your answer here...\"\n            {disabled}\n            on:input={handleAnswerChange}\n        ></textarea>\n    {/if}\n\n    {#if showAnswer}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Your Answer:</h5>\n            <p class=\"text-gray-600\">{item.user_answer || 'Not answered'}</p>\n        </div>\n    {/if}\n\n    {#if showInstructorInfo}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Correct Answer:</h5>\n            <p class=\"text-gray-600\">{item.correct_answer}</p>\n            {#if item.explanation}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Explanation:</h5>\n                <p class=\"text-gray-600\">{item.explanation}</p>\n            {/if}\n            {#if item.hints_used}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Hints Used:</h5>\n                <p class=\"text-gray-600\">{item.hints_used}</p>\n            {/if}\n        </div>\n    {/if}\n</div> ","<script lang=\"ts\">\n    import type { PracticeItem } from '$lib/types';\n    import QuestionHeader from './QuestionHeader.svelte';\n\n    export let item: PracticeItem;\n    export let index: number;\n    export let disabled = false;\n    export let showAnswer = false;\n    export let showInstructorInfo = false;\n    export let onAnswerChange: ((answer: string) => void) | undefined = undefined;\n    export let printMode = false;\n\n    function handleAnswerChange(event: Event) {\n        const target = event.target as HTMLInputElement;\n        if (onAnswerChange) {\n            onAnswerChange(target.value);\n        }\n    }\n\n    // Split the question text by the blank placeholder\n    $: parts = item.question_text.split('_____');\n</script>\n\n<div class=\"border border-gray-200 rounded-lg p-4\">\n    <QuestionHeader {index} />\n    \n    <div class=\"text-gray-600 mb-4\">\n        {#each parts as part, i}\n            {part}\n            {#if i < parts.length - 1}\n                {#if printMode}\n                    <div class=\"inline-block w-32 border-b border-gray-400 mx-1\"></div>\n                {:else}\n                    <input\n                        type=\"text\"\n                        id={`question-${index}-blank-${i}-${item.id}`}\n                        class=\"inline-block w-32 px-2 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500\"\n                        {disabled}\n                        on:input={handleAnswerChange}\n                    />\n                {/if}\n            {/if}\n        {/each}\n    </div>\n\n    {#if showAnswer}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Your Answer:</h5>\n            <p class=\"text-gray-600\">{item.user_answer || 'Not answered'}</p>\n        </div>\n    {/if}\n\n    {#if showInstructorInfo}\n        <div class=\"mt-4 p-4 bg-gray-50 rounded-md\">\n            <h5 class=\"text-sm font-medium text-gray-900 mb-2\">Correct Answer:</h5>\n            <p class=\"text-gray-600\">{item.correct_answer}</p>\n            {#if item.explanation}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Explanation:</h5>\n                <p class=\"text-gray-600\">{item.explanation}</p>\n            {/if}\n            {#if item.hints_used}\n                <h5 class=\"text-sm font-medium text-gray-900 mt-2 mb-2\">Hints Used:</h5>\n                <p class=\"text-gray-600\">{item.hints_used}</p>\n            {/if}\n        </div>\n    {/if}\n</div> ","<script lang=\"ts\">\n    import type { PracticeItem } from '$lib/types';\n    import MultipleChoiceQuestion from './MultipleChoiceQuestion.svelte';\n    import TrueFalseQuestion from './TrueFalseQuestion.svelte';\n    import ShortAnswerQuestion from './ShortAnswerQuestion.svelte';\n    import FillInBlankQuestion from './FillInBlankQuestion.svelte';\n\n    export let item: PracticeItem;\n    export let index: number;\n    export let viewType: 'learner' | 'answered' | 'instructor' = 'learner';\n    export let disabled = false;\n    export let onAnswerChange: ((answer: string) => void) | undefined = undefined;\n    export let printMode = false;\n\n    $: showAnswer = viewType === 'answered' || viewType === 'instructor';\n    $: showInstructorInfo = viewType === 'instructor';\n    $: isDisabled = disabled || viewType !== 'learner';\n</script>\n{#if item.question_type === 'multiple_choice'}\n    <MultipleChoiceQuestion\n        {item}\n        {index}\n        disabled={isDisabled}\n        showAnswer={showAnswer}\n        showInstructorInfo={showInstructorInfo}\n        {onAnswerChange}\n        {printMode}\n    />\n{:else if item.question_type === 'true_false'}\n    <TrueFalseQuestion\n        {item}\n        {index}\n        disabled={isDisabled}\n        showAnswer={showAnswer}\n        showInstructorInfo={showInstructorInfo}\n        {onAnswerChange}\n        {printMode}\n    />\n{:else if item.question_type === 'short_answer'}\n    <ShortAnswerQuestion\n        {item}\n        {index}\n        disabled={isDisabled}\n        showAnswer={showAnswer}\n        showInstructorInfo={showInstructorInfo}\n        {onAnswerChange}\n        {printMode}\n    />\n{:else if item.question_type === 'fill_in_blank'}\n    <FillInBlankQuestion\n        {item}\n        {index}\n        disabled={isDisabled}\n        showAnswer={showAnswer}\n        showInstructorInfo={showInstructorInfo}\n        {onAnswerChange}\n        {printMode}\n    />\n{:else}\n    <div class=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n        <p class=\"text-red-600\">Unsupported question type: {item.question_type}, id: {item.id}</p>\n    </div>\n{/if}","import pb from '$lib/pocketbase';\nimport type { PracticeSession, PracticeItem } from '$lib/types';\n\nexport interface SessionWithExpandedData extends PracticeSession {\n    expand?: {\n        learner?: { id: string; name: string };\n        practice_topic?: { id: string; name: string };\n        practice_items?: PracticeItem[];\n    };\n}\n\nclass SessionService {\n    private async ensureAuth(): Promise<void> {\n        if (!pb.authStore.isValid) {\n            throw new Error('You must be logged in to access practice sessions');\n        }\n    }\n\n    async loadSession(id: string): Promise<SessionWithExpandedData> {\n        try {\n            await this.ensureAuth();\n\n            const result = await pb.collection('practice_sessions').getOne(id, {\n                expand: 'learner,learner.user,practice_topic,practice_items',\n                fields: 'id,name,status,assigned_at,completed_at,generation_prompt,learner,practice_topic,practice_items,expand'\n            });\n\n            if (!result) {\n                throw new Error('Session not found');\n            }\n\n            return result as unknown as SessionWithExpandedData;\n        } catch (err) {\n            console.error('Failed to load session:', err);\n            if (err instanceof Error) {\n                throw err;\n            }\n            throw new Error('Failed to load practice session');\n        }\n    }\n\n    async checkUserRole(): Promise<boolean> {\n        await this.ensureAuth();\n\n        try {\n            const authData = pb.authStore.model;\n            if (!authData) {\n                throw new Error('User not authenticated');\n            }\n\n            try {\n                const instructorRecord = await pb.collection('instructors').getFirstListItem(`user=\"${authData.id}\"`);\n                return !!instructorRecord;\n            } catch (err) {\n                return false;\n            }\n        } catch (err) {\n            console.error('Failed to check user role:', err);\n            return false;\n        }\n    }\n\n    parsePracticeItems(session: SessionWithExpandedData): PracticeItem[] {\n        if (session.expand?.practice_items) {\n            return session.expand.practice_items;\n        } else if (session.practice_items) {\n            try {\n                return JSON.parse(session.practice_items as string) as PracticeItem[];\n            } catch (e) {\n                console.error('Error parsing practice items:', e);\n                return [];\n            }\n        }\n        return [];\n    }\n}\n\nexport const sessionService = new SessionService(); ","<script lang=\"ts\">\n    import { onMount } from 'svelte';\n    import type { PracticeItem } from '$lib/types';\n    import QuestionFactory from '../../../components/questions/QuestionFactory.svelte';\n    import { sessionService, type SessionWithExpandedData } from '$lib/services/session';\n    import { page } from '$app/stores';\n    import { goto } from '$app/navigation';\n    import pb from '$lib/pocketbase';\n    import ActionToolbar from '../../../components/common/ActionToolbar.svelte';\n    import Breadcrumbs from '../../../components/common/Breadcrumbs.svelte';\n    import LoadingSpinner from '../../../components/common/LoadingSpinner.svelte';\n    import ErrorAlert from '../../../components/common/ErrorAlert.svelte';\n\n    // Define the breadcrumb item type\n    type BreadcrumbItem = {\n        label: string;\n        href?: string;\n        icon?: string;\n    };\n\n    let session: SessionWithExpandedData | null = null;\n    let practiceItems: PracticeItem[] = [];\n    let loading = true;\n    let error: string | null = null;\n    let isInstructor = false;\n    let printMode = false;\n    let breadcrumbItems: BreadcrumbItem[] = [];\n\n    onMount(async () => {\n        try {\n            const sessionId = $page.params.id;\n            \n            if (sessionId) {\n                await loadSession(sessionId);\n                await checkUserRole();\n                updateBreadcrumbs();\n            } else {\n                error = 'Invalid session ID';\n                loading = false;\n            }\n        } catch (err) {\n            console.error('Error in onMount:', err);\n            error = err instanceof Error ? err.message : 'An unexpected error occurred';\n            loading = false;\n        }\n    });\n\n    async function checkUserRole() {\n        try {\n            isInstructor = await sessionService.checkUserRole();\n        } catch (err) {\n            console.error('Failed to check user role:', err);\n            isInstructor = false;\n        }\n    }\n\n    async function loadSession(id: string) {\n        try {\n            loading = true;\n            error = null;\n            \n            if (!id) {\n                throw new Error('Session ID is required');\n            }\n\n            session = await sessionService.loadSession(id);\n            \n            if (!session) {\n                throw new Error('Session not found');\n            }\n\n            practiceItems = sessionService.parsePracticeItems(session);\n        } catch (err) {\n            console.error('Failed to load session:', err);\n            error = err instanceof Error ? err.message : 'Failed to load practice session';\n            session = null;\n            practiceItems = [];\n        } finally {\n            loading = false;\n        }\n    }\n\n    function editSession() {\n        if (!session) return;\n        goto(`/practice-sessions/edit/${session.id}`);\n    }\n\n    async function deleteSession() {\n        if (!session) return;\n        \n        if (!confirm('Are you sure you want to delete this practice session?')) {\n            return;\n        }\n        \n        try {\n            await pb.collection('practice_sessions').delete(session.id);\n            \n            // Navigate back to practice topics or dashboard\n            if (session.expand?.practice_topic) {\n                goto(`/practice-topics/${session.expand.practice_topic.id}`);\n            } else {\n                goto('/dashboard');\n            }\n        } catch (err) {\n            console.error('Failed to delete practice session:', err);\n            error = 'Failed to delete practice session: ' + (err instanceof Error ? err.message : String(err));\n        }\n    }\n\n    function handleAnswerChange(index: number, answer: string) {\n        if (practiceItems[index]) {\n            practiceItems[index].user_answer = answer;\n        }\n    }\n\n    function handlePrint() {\n        printMode = true;\n        setTimeout(() => {\n            window.print();\n            // Reset after printing\n            setTimeout(() => {\n                printMode = false;\n            }, 500);\n        }, 200);\n    }\n\n    function updateBreadcrumbs() {\n        if (!session) return;\n        \n        const items: BreadcrumbItem[] = [\n            {\n                label: 'Topics',\n                href: '/practice-topics',\n                icon: 'topic'\n            }\n        ];\n        \n        if (session.expand?.practice_topic) {\n            items.push({\n                label: session.expand.practice_topic.name,\n                href: `/practice-topics/${session.expand.practice_topic.id}`,\n                icon: 'topic'\n            });\n        }\n        \n        // Use the session name or a fallback without date parsing\n        const sessionName = session.name || 'Practice Session';\n        \n        items.push({\n            label: sessionName,\n            icon: 'session'\n        });\n        \n        breadcrumbItems = items;\n    }\n\n    // Actions for the toolbar\n    $: sessionActions = [\n        {\n            id: 'print',\n            label: 'Print',\n            icon: 'print',\n            variant: 'primary' as const,\n            onClick: handlePrint\n        },\n        {\n            id: 'edit',\n            label: 'Edit',\n            icon: 'edit',\n            variant: 'secondary' as const,\n            onClick: editSession\n        },\n        {\n            id: 'delete',\n            label: 'Delete',\n            icon: 'delete',\n            variant: 'danger' as const,\n            onClick: deleteSession\n        }\n    ];\n</script>\n\n<style lang=\"postcss\">\n    @media print {\n        /* Add page breaks between questions */\n        .question-container {\n            page-break-inside: avoid;\n            margin-bottom: 30px;\n            break-inside: avoid;\n            overflow: visible;\n        }\n        \n        /* Print-specific styles */\n        .print-header {\n            margin-bottom: 20px;\n            page-break-after: avoid;\n        }\n        \n        .print-item {\n            margin-bottom: 40px;\n            page-break-inside: avoid;\n        }\n    }\n</style>\n\n{#if !printMode}\n<div class=\"container mx-auto px-4 py-8 no-print\">\n    <div class=\"flex justify-between items-center mb-6\">\n        <div>\n            <Breadcrumbs items={breadcrumbItems} />\n        </div>\n        <ActionToolbar actions={sessionActions} />\n    </div>\n\n    {#if loading}\n        <div class=\"flex justify-center items-center h-64\">\n            <LoadingSpinner size=\"md\" color=\"primary\" />\n        </div>\n    {:else if error}\n        <ErrorAlert message={error} />\n    {:else if session}\n        <div class=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n            <h2 class=\"text-xl font-semibold text-gray-900 mb-2\">{session.name || 'Unnamed Practice'}</h2>\n            \n            <div class=\"flex flex-wrap gap-2 mb-4\">\n                <span class={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full \n                    ${session.status === 'Completed' ? 'bg-green-100 text-green-800' : \n                    session.status === 'InProgress' ? 'bg-blue-100 text-blue-800' : \n                    'bg-gray-100 text-gray-800'}`}>\n                    {session.status}\n                </span>\n                \n                {#if session.assigned_at}\n                    <span class=\"bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                        Assigned: {new Date(session.assigned_at).toLocaleDateString()}\n                    </span>\n                {/if}\n                \n                {#if session.completed_at}\n                    <span class=\"bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded\">\n                        Completed: {new Date(session.completed_at).toLocaleDateString()}\n                    </span>\n                {/if}\n            </div>\n\n            {#if session.expand?.learner}\n                <div class=\"mb-4\">\n                    <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Learner:</h3>\n                    <p class=\"text-gray-600\">{session.expand.learner.name}</p>\n                </div>\n            {/if}\n\n            {#if session.expand?.practice_topic}\n                <div class=\"mb-4\">\n                    <h3 class=\"text-sm font-medium text-gray-700 mb-2\">Topic:</h3>\n                    <p class=\"text-gray-600\">{session.expand.practice_topic.name}</p>\n                </div>\n            {/if}\n\n            {#if practiceItems.length > 0}\n                <div class=\"mt-6\">\n                    <h3 class=\"text-lg font-medium text-gray-900 mb-4\">Practice Items</h3>\n                    <div class=\"space-y-6\">\n                        {#each practiceItems as item, index}\n                            <div class=\"question-container\">\n                                <QuestionFactory\n                                    {item}\n                                    {index}\n                                    viewType={session.status === 'Completed' ? (isInstructor ? 'instructor' : 'answered') : 'learner'}\n                                    disabled={session.status === 'Completed'}\n                                    onAnswerChange={(answer) => handleAnswerChange(index, answer)}\n                                />\n                            </div>\n                        {/each}\n                    </div>\n                </div>\n            {:else}\n                <div class=\"bg-gray-50 border border-gray-200 p-4 rounded-md\">\n                    <p class=\"text-gray-600\">No practice items available.</p>\n                </div>\n            {/if}\n        </div>\n    {/if}\n</div>\n{/if}\n\n<!-- Print-only version that shows when printing -->\n<div class=\"print-only print-container\">\n    {#if session}\n        <div class=\"print-header\">\n            <h1 class=\"text-3xl font-bold mb-2\">{session.name || 'Practice Session'}</h1>\n            \n            {#if session.expand?.practice_topic}\n                <h2 class=\"text-xl mb-1\">Topic: {session.expand.practice_topic.name}</h2>\n            {/if}\n            \n            {#if session.expand?.learner}\n                <p class=\"text-lg\">Learner: {session.expand.learner.name}</p>\n            {/if}\n        </div>\n\n        {#if practiceItems.length > 0}\n                {#each practiceItems as item, index}\n                    <div class=\"print-item question-container\">\n                        <QuestionFactory\n                            {item}\n                            {index}\n                            printMode={true}\n                            viewType={session.status === 'Completed' ? (isInstructor ? 'instructor' : 'answered') : 'learner'}\n                            disabled={session.status === 'Completed'}\n                            onAnswerChange={(answer) => handleAnswerChange(index, answer)}\n                        />\n                    </div>\n                {/each}\n        {:else}\n            <p>No practice items available.</p>\n        {/if}\n    {/if}\n</div> "],"names":["index","$.prop","$$props","$.template_effect","$.set_text","text","item","disabled","showAnswer","showInstructorInfo","onAnswerChange","printMode","handleAnswerChange","event","target","$.each","div_1","option","optionIndex","$.set_attribute","input","$$render","consequent","alternate","consequent_1","text_4","consequent_2","text_5","consequent_3","text_3","consequent_4","alternate_1","text_2","consequent_5","label","label_1","$.set","parts","$.get","part","i","viewType","isDisabled","alternate_3","alternate_2","SessionService","pb","id","result","err","authData","session","_a","e","sessionService","practiceItems","$.mutable_source","loading","error","isInstructor","breadcrumbItems","onMount","sessionId","$page","loadSession","checkUserRole","updateBreadcrumbs","editSession","goto","deleteSession","answer","$.mutate","handlePrint","items","sessionName","sessionActions","div_9","consequent_6","text_1","consequent_7","consequent_8","text_7","consequent_9","text_8","consequent_10","node_15","consequent_11","consequent_12"],"mappings":"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"}